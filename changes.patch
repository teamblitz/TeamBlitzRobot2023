diff --git a/src/main/java/frc/robot/subsystems/drive/DriveSubsystem.java b/src/main/java/frc/robot/subsystems/drive/DriveSubsystem.java
index 469ac9e..b0a3280 100644
--- a/src/main/java/frc/robot/subsystems/drive/DriveSubsystem.java
+++ b/src/main/java/frc/robot/subsystems/drive/DriveSubsystem.java
@@ -4,25 +4,22 @@ package frc.robot.subsystems.drive;
 
 import static frc.robot.Constants.Swerve.*;
 
+import edu.wpi.first.math.MathUtil;
+import edu.wpi.first.math.controller.PIDController;
 import edu.wpi.first.math.geometry.Pose2d;
 import edu.wpi.first.math.geometry.Rotation2d;
 import edu.wpi.first.math.geometry.Transform2d;
 import edu.wpi.first.math.geometry.Translation2d;
-import edu.wpi.first.math.kinematics.ChassisSpeeds;
-import edu.wpi.first.math.kinematics.SwerveDriveKinematics;
-import edu.wpi.first.math.kinematics.SwerveDriveOdometry;
-import edu.wpi.first.math.kinematics.SwerveModulePosition;
-import edu.wpi.first.math.kinematics.SwerveModuleState;
+import edu.wpi.first.math.kinematics.*;
 import edu.wpi.first.networktables.GenericEntry;
+import edu.wpi.first.wpilibj.Timer;
 import edu.wpi.first.wpilibj.shuffleboard.BuiltInLayouts;
 import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
 import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardLayout;
 import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
 import edu.wpi.first.wpilibj.smartdashboard.Field2d;
 import edu.wpi.first.wpilibj2.command.SubsystemBase;
-import edu.wpi.first.wpilibj2.command.SwerveControllerCommand;
 import frc.lib.BlitzSubsystem;
-import frc.robot.commands.SwerveTuning;
 import frc.robot.subsystems.drive.gyro.GyroIO;
 import frc.robot.subsystems.drive.gyro.GyroIOInputsAutoLogged;
 import org.littletonrobotics.junction.Logger;
@@ -63,6 +60,11 @@ public class DriveSubsystem extends SubsystemBase implements BlitzSubsystem {
     private double driveI = DRIVE_KI;
     private double driveD = DRIVE_KD;
 
+    private double lastTurnCommandSeconds;
+    private boolean keepHeadingSetpointSet;
+
+    private PIDController keepHeadingPid;
+
     public DriveSubsystem(
             SwerveModuleIO frontLeft,
             SwerveModuleIO frontRight,
@@ -90,11 +92,32 @@ public class DriveSubsystem extends SubsystemBase implements BlitzSubsystem {
         swerveOdometry = new SwerveDriveOdometry(KINEMATICS, getYaw(), getModulePositions());
         this.gyroIO = gyroIO;
         logger = Logger.getInstance();
+
+        keepHeadingPid = new PIDController(.01, 0, 0);
+        keepHeadingPid.enableContinuousInput(-180, 180);
+
         initTelemetry();
     }
 
     public void drive(
-            Translation2d translation, double rotation, boolean fieldRelative, boolean isOpenLoop) {
+            Translation2d translation,
+            double rotation,
+            boolean fieldRelative,
+            boolean isOpenLoop,
+            boolean maintainHeading) {
+
+        if (rotation != 0) {
+            lastTurnCommandSeconds = Timer.getFPGATimestamp();
+            keepHeadingSetpointSet = false;
+        }
+        if (lastTurnCommandSeconds >= Timer.getFPGATimestamp() + .5
+                && !keepHeadingSetpointSet) { // If it has been at least .5 seconds.
+            keepHeadingPid.setSetpoint(getYaw().getDegrees());
+            keepHeadingSetpointSet = true;
+        }
+        if (keepHeadingSetpointSet) {
+            rotation = MathUtil.clamp(keepHeadingPid.calculate(getYaw().getDegrees()), -.1, .1);
+        }
         SwerveModuleState[] swerveModuleStates =
                 KINEMATICS.toSwerveModuleStates(
                         fieldRelative
@@ -148,7 +171,7 @@ public class DriveSubsystem extends SubsystemBase implements BlitzSubsystem {
     }
 
     public void zeroGyro() {
-            gyroIO.zeroGyro();
+        gyroIO.zeroGyro();
         // TODO: I plan to have 2
     }
 
@@ -216,7 +239,8 @@ public class DriveSubsystem extends SubsystemBase implements BlitzSubsystem {
 
     public void initTelemetry() {
         shuffleboardTab.add(field);
-        // tuningTab.add("Tuning Command", new SwerveTuning(this));
+        tuningTab.add("KeepHeadingPid", keepHeadingPid);
+        // tuningTab.add("Tuning Command", new SwerveTuningCommand(this));
     }
 
     public void drawRobotOnField(Field2d field) {
